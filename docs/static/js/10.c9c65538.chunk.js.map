{"version":3,"sources":["../node_modules/@material-ui/icons/esm/ArrowForwardIos.js","pages/AnalyticsPage/AnalyticsInfo.tsx","pages/AnalyticsPage/AnalyticsLiquidityChart.tsx","pages/AnalyticsPage/AnalyticsVolumeChart.tsx","pages/AnalyticsPage/AnalyticsOverview.tsx"],"names":["createSvgIcon","React","d","AnalyticsInfo","data","Box","mr","Typography","variant","pairCount","toLocaleString","oneDayTxns","oneDayVolumeUSD","GlobalConst","utils","FEEPERCENT","AnalyticsLiquidityChart","palette","useTheme","globalData","useGlobalData","useState","analyticChart","ONE_MONTH_CHART","durationIndex","setDurationIndex","globalChartData","updateGlobalChartData","useEffect","fetchChartData","a","getChartData","ALL_CHART","getChartStartTime","newChartData","chartData","getLimitedData","CHART_COUNT","liquidityPercentColor","getPriceColor","Number","liquidityChangeUSD","yAxisValues","useMemo","dailyVolumes","map","value","totalLiquidityUSD","minVolume","Math","floor","min","maxVolume","ceil","max","values","step","i","push","display","justifyContent","style","color","text","disabled","fontWeight","typeTexts","GlobalData","analytics","CHART_DURATION_TEXTS","chartTypes","CHART_DURATIONS","chartType","setChartType","mt","alignItems","primary","formatCompact","ml","height","px","borderRadius","bgcolor","bgColor","textColor","my","Skeleton","width","moment","format","dates","date","add","unix","categories","getChartDates","AnalyticsVolumeChart","volumeTypes","volumeIndex","setVolumeIndex","selectedVolumeIndex","setSelectedVolumeIndex","newWeeklyData","dayItems","weekItems","day","week","liquidityWeeks","forEach","ind","month","formatDateFromTimeStamp","THREE_MONTH_CHART","dateStr","getVolumePercent","volumeData","length","currentVolumeIndex","currentVolumeData","prevVolumeData","currentVolume","prevVolume","weeklyVolumeUSD","dailyVolumeUSD","weeklyVolumeChange","volumeChangeUSD","volumeDates","weekStart","weekEnd","barChartData","volumePercentColor","flex","oneWeekVolume","onHover","onMouseLeave","dayjs","extend","utc","useStyles","makeStyles","panel","background","grey","A700","headingWrapper","marginLeft","AnalyticsOverview","classes","history","useHistory","breakpoints","isMobile","useMediaQuery","down","updateGlobalData","topTokens","updateTopTokens","topPairs","updateTopPairs","fetchGlobalData","getEthPrice","newPrice","oneDayPrice","getGlobalData","fetchTopTokens","getTopTokens","ROWSPERPAGE","topTokensData","fetchTopPairs","getTopPairs","pairs","formattedPairs","pair","id","getBulkPairData","pairData","mb","Grid","container","spacing","item","xs","sm","md","className","padding","flexDirection","flexWrap","paddingX","paddingY","cursor","onClick","ArrowForwardIos"],"mappings":"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","file":"static/js/10.c9c65538.chunk.js","sourcesContent":["import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M5.88 4.12L13.76 12l-7.88 7.88L8 22l10-10L8 2z\"\n}), 'ArrowForwardIos');","import React from 'react';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport { GlobalConst } from 'constants/index';\r\n\r\ninterface AnalyticsInfoProps {\r\n  data: any;\r\n}\r\n\r\nconst AnalyticsInfo: React.FC<AnalyticsInfoProps> = ({ data }) => {\r\n  return (\r\n    <>\r\n      <Box mr={5}>\r\n        <Typography variant='body2'>\r\n          Pairs: {data.pairCount.toLocaleString()}\r\n        </Typography>\r\n      </Box>\r\n      <Box mr={5}>\r\n        <Typography variant='body2'>\r\n          24h Transactions: {data.oneDayTxns.toLocaleString()}\r\n        </Typography>\r\n      </Box>\r\n      <Box>\r\n        <Typography variant='body2'>\r\n          24h Fees: $\r\n          {(\r\n            data.oneDayVolumeUSD * GlobalConst.utils.FEEPERCENT\r\n          ).toLocaleString()}\r\n        </Typography>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AnalyticsInfo;\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport moment from 'moment';\r\nimport { useGlobalData } from 'state/application/hooks';\r\nimport {\r\n  formatCompact,\r\n  getChartData,\r\n  getPriceColor,\r\n  getChartDates,\r\n  getChartStartTime,\r\n  getLimitedData,\r\n} from 'utils';\r\nimport { GlobalConst, GlobalData } from 'constants/index';\r\nimport { AreaChart, ChartType } from 'components';\r\n\r\nconst AnalyticsLiquidityChart: React.FC = () => {\r\n  const { palette } = useTheme();\r\n  const { globalData } = useGlobalData();\r\n  const [durationIndex, setDurationIndex] = useState(\r\n    GlobalConst.analyticChart.ONE_MONTH_CHART,\r\n  );\r\n  const [globalChartData, updateGlobalChartData] = useState<any[] | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchChartData = async () => {\r\n      updateGlobalChartData(null);\r\n      const [newChartData] = await getChartData(\r\n        durationIndex === GlobalConst.analyticChart.ALL_CHART\r\n          ? 0\r\n          : getChartStartTime(durationIndex),\r\n      );\r\n      if (newChartData) {\r\n        const chartData = getLimitedData(\r\n          newChartData,\r\n          GlobalConst.analyticChart.CHART_COUNT,\r\n        );\r\n        updateGlobalChartData(chartData);\r\n      }\r\n    };\r\n    fetchChartData();\r\n  }, [updateGlobalChartData, durationIndex]);\r\n\r\n  const liquidityPercentColor = getPriceColor(\r\n    globalData ? Number(globalData.liquidityChangeUSD) : 0,\r\n    palette,\r\n  );\r\n\r\n  const yAxisValues = useMemo(() => {\r\n    if (globalChartData) {\r\n      const dailyVolumes: number[] = globalChartData.map((value: any) =>\r\n        Number(value.totalLiquidityUSD),\r\n      );\r\n      // this is for defining the scale for the liquidity values to present in graph. Liquidity values are more than 100M so set the min and max amount with rounding after dividing into 20000000 to show all liquidity values into the graph\r\n      const minVolume =\r\n        Math.floor(Math.min(...dailyVolumes) / 20000000) * 20000000;\r\n      const maxVolume =\r\n        Math.ceil(Math.max(...dailyVolumes) / 20000000) * 20000000;\r\n      const values = [];\r\n      // show 10 values in the y axis of the graph\r\n      const step = (maxVolume - minVolume) / 10;\r\n      for (let i = maxVolume; i >= minVolume; i -= step) {\r\n        values.push(i);\r\n      }\r\n      return values;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }, [globalChartData]);\r\n\r\n  return (\r\n    <>\r\n      <Box display='flex' justifyContent='space-between'>\r\n        <Typography\r\n          variant='caption'\r\n          style={{ color: palette.text.disabled, fontWeight: 'bold' }}\r\n        >\r\n          LIQUIDITY\r\n        </Typography>\r\n        <ChartType\r\n          typeTexts={GlobalData.analytics.CHART_DURATION_TEXTS}\r\n          chartTypes={GlobalData.analytics.CHART_DURATIONS}\r\n          chartType={durationIndex}\r\n          setChartType={setDurationIndex}\r\n        />\r\n      </Box>\r\n      {globalData ? (\r\n        <Box mt={0.5} display='flex' alignItems='center'>\r\n          <Typography variant='h5' style={{ color: palette.text.primary }}>\r\n            ${formatCompact(globalData.totalLiquidityUSD)}\r\n          </Typography>\r\n          <Box\r\n            ml={1}\r\n            height={23}\r\n            px={1}\r\n            borderRadius={40}\r\n            bgcolor={liquidityPercentColor.bgColor}\r\n            color={liquidityPercentColor.textColor}\r\n          >\r\n            <Typography variant='caption'>\r\n              {`${globalData.liquidityChangeUSD > 0 ? '+' : ''}\r\n                      ${globalData.liquidityChangeUSD.toLocaleString()}`}\r\n              %\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      ) : (\r\n        <Box my={0.5}>\r\n          <Skeleton variant='rect' width='100%' height={24} />\r\n        </Box>\r\n      )}\r\n      <Box>\r\n        <Typography style={{ color: palette.text.disabled }} variant='caption'>\r\n          {moment().format('MMM DD, YYYY')}\r\n        </Typography>\r\n      </Box>\r\n      <Box mt={2}>\r\n        {globalChartData ? (\r\n          <AreaChart\r\n            data={globalChartData.map((value: any) =>\r\n              Number(value.totalLiquidityUSD),\r\n            )}\r\n            yAxisValues={yAxisValues}\r\n            dates={globalChartData.map((value: any) =>\r\n              moment(value.date * 1000)\r\n                .add(1, 'day')\r\n                .unix(),\r\n            )}\r\n            width='100%'\r\n            height={250}\r\n            categories={getChartDates(globalChartData, durationIndex)}\r\n          />\r\n        ) : (\r\n          <Skeleton variant='rect' width='100%' height={223} />\r\n        )}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AnalyticsLiquidityChart;\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { useGlobalData } from 'state/application/hooks';\r\nimport {\r\n  formatCompact,\r\n  getChartData,\r\n  formatDateFromTimeStamp,\r\n  getPriceColor,\r\n  getChartDates,\r\n  getChartStartTime,\r\n  getLimitedData,\r\n} from 'utils';\r\nimport { BarChart, ChartType } from 'components';\r\nimport { GlobalConst, GlobalData } from 'constants/index';\r\n\r\nconst DAY_VOLUME = 0;\r\nconst WEEK_VOLUME = 1;\r\n\r\nconst AnalyticsVolumeChart: React.FC = () => {\r\n  const { palette } = useTheme();\r\n  const volumeTypes = [DAY_VOLUME, WEEK_VOLUME];\r\n  const volumeTypeTexts = ['D', 'W'];\r\n  const [volumeIndex, setVolumeIndex] = useState(DAY_VOLUME);\r\n  const [durationIndex, setDurationIndex] = useState(\r\n    GlobalConst.analyticChart.ONE_MONTH_CHART,\r\n  );\r\n  const [selectedVolumeIndex, setSelectedVolumeIndex] = useState(-1);\r\n  const { globalData } = useGlobalData();\r\n  const [globalChartData, updateGlobalChartData] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchChartData = async () => {\r\n      updateGlobalChartData(null);\r\n      const [newChartData, newWeeklyData] = await getChartData(\r\n        durationIndex === GlobalConst.analyticChart.ALL_CHART\r\n          ? 0\r\n          : getChartStartTime(durationIndex),\r\n      );\r\n      if (newChartData && newWeeklyData) {\r\n        const dayItems = getLimitedData(\r\n          newChartData,\r\n          GlobalConst.analyticChart.CHART_COUNT,\r\n        );\r\n        const weekItems = getLimitedData(\r\n          newWeeklyData,\r\n          GlobalConst.analyticChart.CHART_COUNT,\r\n        );\r\n        updateGlobalChartData({ day: dayItems, week: weekItems });\r\n      }\r\n    };\r\n    fetchChartData();\r\n  }, [updateGlobalChartData, durationIndex]);\r\n\r\n  const liquidityWeeks = useMemo(() => {\r\n    if (globalChartData) {\r\n      const dates: string[] = [];\r\n      globalChartData.week.forEach((value: any, ind: number) => {\r\n        const month = formatDateFromTimeStamp(Number(value.date), 'MMM');\r\n        const monthLastDate =\r\n          ind > 0\r\n            ? formatDateFromTimeStamp(\r\n                Number(globalChartData.week[ind - 1].date),\r\n                'MMM',\r\n              )\r\n            : '';\r\n        if (monthLastDate !== month) {\r\n          dates.push(month);\r\n        }\r\n        if (\r\n          durationIndex === GlobalConst.analyticChart.ONE_MONTH_CHART ||\r\n          durationIndex === GlobalConst.analyticChart.THREE_MONTH_CHART\r\n        ) {\r\n          const dateStr = formatDateFromTimeStamp(Number(value.date), 'D');\r\n          if (Number(dateStr) % 2 === 0) {\r\n            //Select dates(one date per 2 weeks) for x axis values of volume chart on week mode\r\n            dates.push(dateStr);\r\n          }\r\n        }\r\n      });\r\n      return dates;\r\n    } else {\r\n      return [];\r\n    }\r\n  }, [globalChartData, durationIndex]);\r\n\r\n  const getVolumePercent = (volumeIndex: number) => {\r\n    if (globalChartData && selectedVolumeIndex > 0) {\r\n      const volumeDataArr = [globalChartData.day, globalChartData.week];\r\n      const volumeData = volumeDataArr[volumeIndex];\r\n      if (!volumeData || volumeData.length <= 1) return 0;\r\n      const currentVolumeIndex = Math.min(\r\n        selectedVolumeIndex,\r\n        volumeData.length - 1,\r\n      );\r\n      const currentVolumeData = volumeData[currentVolumeIndex];\r\n      const prevVolumeData = volumeData[currentVolumeIndex - 1];\r\n      let currentVolume = 0;\r\n      let prevVolume = 0;\r\n      switch (volumeIndex) {\r\n        case WEEK_VOLUME:\r\n          currentVolume = currentVolumeData.weeklyVolumeUSD;\r\n          prevVolume = prevVolumeData.weeklyVolumeUSD;\r\n          break;\r\n        case DAY_VOLUME:\r\n          currentVolume = currentVolumeData.dailyVolumeUSD;\r\n          prevVolume = prevVolumeData.dailyVolumeUSD;\r\n          break;\r\n      }\r\n      if (prevVolume <= 0) return 0;\r\n      return (currentVolume / prevVolume) * 100 - 100;\r\n    } else if (globalData && selectedVolumeIndex === -1) {\r\n      switch (volumeIndex) {\r\n        case WEEK_VOLUME:\r\n          return globalData.weeklyVolumeChange;\r\n        case DAY_VOLUME:\r\n          return globalData.volumeChangeUSD;\r\n        default:\r\n          return 0;\r\n      }\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  const volumeDates = useMemo(() => {\r\n    if (selectedVolumeIndex > -1) {\r\n      if (volumeIndex === DAY_VOLUME) {\r\n        return formatDateFromTimeStamp(\r\n          Number(globalChartData.day[selectedVolumeIndex].date),\r\n          'MMM DD, YYYY',\r\n        );\r\n      } else {\r\n        const weekStart = formatDateFromTimeStamp(\r\n          Number(\r\n            globalChartData.week[Math.max(0, selectedVolumeIndex - 1)].date,\r\n          ),\r\n          'MMM DD, YYYY',\r\n          selectedVolumeIndex > 0 ? 2 : -5,\r\n        );\r\n        const weekEnd = formatDateFromTimeStamp(\r\n          Number(globalChartData.week[selectedVolumeIndex].date),\r\n          'MMM DD, YYYY',\r\n        );\r\n        return `${weekStart} - ${weekEnd}`;\r\n      }\r\n    }\r\n    return '';\r\n  }, [globalChartData, selectedVolumeIndex, volumeIndex]);\r\n\r\n  const barChartData = useMemo(() => {\r\n    if (globalChartData) {\r\n      return volumeIndex === WEEK_VOLUME\r\n        ? globalChartData.week.map((value: any) => value.weeklyVolumeUSD)\r\n        : globalChartData.day.map((value: any) => value.dailyVolumeUSD);\r\n    } else {\r\n      return [];\r\n    }\r\n  }, [globalChartData, volumeIndex]);\r\n\r\n  const volumePercentColor = getPriceColor(\r\n    Number(getVolumePercent(volumeIndex)),\r\n    palette,\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Box>\r\n        <Box display='flex' justifyContent='space-between'>\r\n          <Typography\r\n            variant='caption'\r\n            style={{ color: palette.text.disabled, fontWeight: 'bold' }}\r\n          >\r\n            VOLUME {selectedVolumeIndex === -1 ? '(24hr)' : ''}\r\n          </Typography>\r\n          <ChartType\r\n            chartTypes={volumeTypes}\r\n            typeTexts={volumeTypeTexts}\r\n            chartType={volumeIndex}\r\n            setChartType={setVolumeIndex}\r\n          />\r\n        </Box>\r\n        <Box\r\n          mt={0.5}\r\n          display='flex'\r\n          alignItems='flex-start'\r\n          justifyContent='space-between'\r\n        >\r\n          {globalChartData && globalData ? (\r\n            <Box flex={1} mr={2}>\r\n              <Box display='flex' alignItems='center'>\r\n                <Typography\r\n                  variant='h5'\r\n                  style={{ color: palette.text.primary }}\r\n                >\r\n                  $\r\n                  {formatCompact(\r\n                    selectedVolumeIndex > -1\r\n                      ? volumeIndex === DAY_VOLUME\r\n                        ? globalChartData.day[selectedVolumeIndex]\r\n                            .dailyVolumeUSD\r\n                        : globalChartData.week[selectedVolumeIndex]\r\n                            .weeklyVolumeUSD\r\n                      : volumeIndex === DAY_VOLUME\r\n                      ? globalData.oneDayVolumeUSD\r\n                      : globalData.oneWeekVolume,\r\n                  )}\r\n                </Typography>\r\n                <Box\r\n                  ml={1}\r\n                  height={23}\r\n                  px={1}\r\n                  borderRadius={40}\r\n                  bgcolor={volumePercentColor.bgColor}\r\n                  color={volumePercentColor.textColor}\r\n                >\r\n                  <Typography variant='caption'>\r\n                    {`${getVolumePercent(volumeIndex) > 0 ? '+' : ''}\r\n                      ${getVolumePercent(volumeIndex).toLocaleString()}`}\r\n                    %\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n              <Box height={21}>\r\n                <Typography\r\n                  style={{ color: palette.text.disabled }}\r\n                  variant='caption'\r\n                >\r\n                  {volumeDates}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          ) : (\r\n            <Box mr={2} flex={1}>\r\n              <Skeleton variant='rect' width='100%' height={24} />\r\n            </Box>\r\n          )}\r\n          <ChartType\r\n            chartTypes={GlobalData.analytics.CHART_DURATIONS}\r\n            typeTexts={GlobalData.analytics.CHART_DURATION_TEXTS}\r\n            chartType={durationIndex}\r\n            setChartType={setDurationIndex}\r\n          />\r\n        </Box>\r\n      </Box>\r\n      <Box mt={2}>\r\n        {globalChartData ? (\r\n          <BarChart\r\n            height={200}\r\n            data={barChartData}\r\n            categories={\r\n              volumeIndex === WEEK_VOLUME\r\n                ? liquidityWeeks\r\n                : getChartDates(globalChartData.day, durationIndex)\r\n            }\r\n            onHover={(ind) => setSelectedVolumeIndex(ind)}\r\n            onMouseLeave={() => {\r\n              setSelectedVolumeIndex(-1);\r\n            }}\r\n          />\r\n        ) : (\r\n          <Skeleton variant='rect' width='100%' height={250} />\r\n        )}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AnalyticsVolumeChart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Box, Typography, Grid, useMediaQuery } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { ArrowForwardIos } from '@material-ui/icons';\r\nimport dayjs from 'dayjs';\r\nimport utc from 'dayjs/plugin/utc';\r\nimport { useGlobalData } from 'state/application/hooks';\r\nimport {\r\n  getEthPrice,\r\n  getTopPairs,\r\n  getTopTokens,\r\n  getGlobalData,\r\n  getBulkPairData,\r\n} from 'utils';\r\nimport { GlobalConst } from 'constants/index';\r\nimport { TokensTable, PairTable } from 'components';\r\nimport AnalyticsInfo from './AnalyticsInfo';\r\nimport AnalyticsLiquidityChart from './AnalyticsLiquidityChart';\r\nimport AnalyticsVolumeChart from './AnalyticsVolumeChart';\r\n\r\ndayjs.extend(utc);\r\n\r\nconst useStyles = makeStyles(({ palette }) => ({\r\n  panel: {\r\n    background: palette.grey.A700,\r\n    borderRadius: 20,\r\n  },\r\n  headingWrapper: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    '& h6': {\r\n      color: palette.text.disabled,\r\n    },\r\n    '& svg': {\r\n      height: 16,\r\n      marginLeft: 2,\r\n      color: '#3d71ff',\r\n    },\r\n  },\r\n}));\r\n\r\nconst AnalyticsOverview: React.FC = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { breakpoints } = useTheme();\r\n  const isMobile = useMediaQuery(breakpoints.down('xs'));\r\n  const { globalData, updateGlobalData } = useGlobalData();\r\n  const [topTokens, updateTopTokens] = useState<any[] | null>(null);\r\n  const [topPairs, updateTopPairs] = useState<any[] | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchGlobalData = async () => {\r\n      const [newPrice, oneDayPrice] = await getEthPrice();\r\n      const globalData = await getGlobalData(newPrice, oneDayPrice);\r\n      if (globalData) {\r\n        updateGlobalData({ data: globalData });\r\n      }\r\n    };\r\n    const fetchTopTokens = async () => {\r\n      updateTopTokens(null);\r\n      const [newPrice, oneDayPrice] = await getEthPrice();\r\n      const topTokensData = await getTopTokens(\r\n        newPrice,\r\n        oneDayPrice,\r\n        GlobalConst.utils.ROWSPERPAGE,\r\n      );\r\n      if (topTokensData) {\r\n        updateTopTokens(topTokensData);\r\n      }\r\n    };\r\n    const fetchTopPairs = async () => {\r\n      updateTopPairs(null);\r\n      const [newPrice] = await getEthPrice();\r\n      const pairs = await getTopPairs(GlobalConst.utils.ROWSPERPAGE);\r\n      const formattedPairs = pairs\r\n        ? pairs.map((pair: any) => {\r\n            return pair.id;\r\n          })\r\n        : [];\r\n      const pairData = await getBulkPairData(formattedPairs, newPrice);\r\n      if (pairData) {\r\n        updateTopPairs(pairData);\r\n      }\r\n    };\r\n    fetchGlobalData();\r\n    fetchTopTokens();\r\n    fetchTopPairs();\r\n  }, [updateGlobalData, updateTopTokens, updateTopPairs]);\r\n\r\n  return (\r\n    <Box width='100%' mb={3}>\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12} sm={12} md={6}>\r\n          <Box className={classes.panel} padding={isMobile ? 1.5 : 3} width={1}>\r\n            <AnalyticsLiquidityChart />\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xs={12} sm={12} md={6}>\r\n          <Box\r\n            className={classes.panel}\r\n            padding={isMobile ? 1.5 : 3}\r\n            width={1}\r\n            height={1}\r\n            display='flex'\r\n            flexDirection='column'\r\n            justifyContent='space-between'\r\n          >\r\n            <AnalyticsVolumeChart />\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n      <Box mt={4}>\r\n        <Box\r\n          display='flex'\r\n          flexWrap='wrap'\r\n          paddingX={4}\r\n          paddingY={1.5}\r\n          className={classes.panel}\r\n        >\r\n          {globalData ? (\r\n            <AnalyticsInfo data={globalData} />\r\n          ) : (\r\n            <Skeleton width='100%' height={20} />\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      <Box mt={4}>\r\n        <Box display='flex' justifyContent='space-between' alignItems='center'>\r\n          <Box className={classes.headingWrapper}>\r\n            <Typography variant='h6'>Top Tokens</Typography>\r\n          </Box>\r\n          <Box\r\n            className={classes.headingWrapper}\r\n            style={{ cursor: 'pointer' }}\r\n            onClick={() => history.push(`/analytics/tokens`)}\r\n          >\r\n            <Typography variant='h6'>See All</Typography>\r\n            <ArrowForwardIos />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      <Box\r\n        mt={3}\r\n        paddingX={isMobile ? 1.5 : 4}\r\n        paddingY={isMobile ? 1.5 : 3}\r\n        className={classes.panel}\r\n      >\r\n        {topTokens ? (\r\n          <TokensTable data={topTokens} />\r\n        ) : (\r\n          <Skeleton variant='rect' width='100%' height={150} />\r\n        )}\r\n      </Box>\r\n      <Box mt={4}>\r\n        <Box display='flex' justifyContent='space-between' alignItems='center'>\r\n          <Box className={classes.headingWrapper}>\r\n            <Typography variant='h6'>Top Pairs</Typography>\r\n          </Box>\r\n          <Box\r\n            className={classes.headingWrapper}\r\n            style={{ cursor: 'pointer' }}\r\n            onClick={() => history.push(`/analytics/pairs`)}\r\n          >\r\n            <Typography variant='h6'>See All</Typography>\r\n            <ArrowForwardIos />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      <Box\r\n        mt={3}\r\n        paddingX={isMobile ? 1.5 : 4}\r\n        paddingY={isMobile ? 1.5 : 3}\r\n        className={classes.panel}\r\n      >\r\n        {topPairs ? (\r\n          <PairTable data={topPairs} />\r\n        ) : (\r\n          <Skeleton variant='rect' width='100%' height={150} />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AnalyticsOverview;\r\n"],"sourceRoot":""}